JavaScript

• Linguagem integrada ao navegador.
• Usa o chamado “modelo de execução controlado por eventos”, ou seja, o código JavaScript só é executado quando o evento ao qual está associado é acionado (em alguns casos, podemos inserir o código sem a associação a eventos e o mesmo é executado conforme o navegador interpreta a página, mas isso é menos usual ). • Processamento do lado cliente, no navegador.
É uma linguagem interpretada, diferente de outras linguagens que fazem o processo de compilação antes de executar o programa como, por exemplo, a linguagem Java.

JavaScript – para que serve?
Javascript é uma linguagem desenvolvida para a internet, com ela é possível realizarmos validações do lado cliente, interações entre páginas.
Com javascript é possível alterar dinamicamente estilos e elementos da página HTML, quando juntamos javascript com css temos então o DHTML, ou criação de HTML dinamicamente.

O que podemos fazer com JavaScript?
Usos mais comuns de JavaScript:

Fazer algumas animações (como menus e submenus)
 - Validar formulários antes do envio
 - “Conversar” com o servidor usando XML
 - Identificar o contexto (navegador, tamanho de tela etc.) e definir os comportamentos em função dele.
 - Quando é executado um programa em Javascript?


Peguemos o site do Google como exemplo:
 - Quando muda a cor de contorno do campo?
 - Quando se abre o autocomplete da procura?
 - Quando se abrem os detalhes de um link? (aquilo que aparece do lado direito do link). “Um programa é uma lista de comandos (ou ações) que devem ser executados em ordem”



Evento

Todo evento acontece em um elemento da página.
E as reações aos eventos (programadas em JavaScript) são sempre registradas como propriedades dos elementos

Elementos								Evento								Propriedade que registra reação

Todos elementos que aparecem na página	Clique no elemento 					onclick
										Mouse passando sobre				onmouseover

input, select, textarea					onclick								onfocus
										onmouseover							onblur

Formulário								Formulário sendo enviado			onsubmit

Body									Página terminou de ser montada		onload



Como inserir um código JavaScript na página?

Podemos inserir nossos códigos JavaScript das seguintes formas:

Dentro de um marcador html
Dentro do corpo da página <body>....</body>
Dentro do cabeçalho <head>....</head> (Em um arquivo separado do html, este arquivo deve ter a extensão .js)
Não se preocupe com os comandos em Js por hora, iremos abordar mais a frente.


JavaScript em uma tag
Quando inserimos um código JavaScript em uma tag, este é sempre associado a um evento.
Note que, se o JavaScript estiver envolvido por aspas, só é possível usar apóstrofes no código (que, no JavaScript, tem a mesma função).

Exemplo:

<input type="button" value="Clique" onclick="this.value='Texto alterado'">


JavaScript dentro do body e head
Se fizermos uma comparação com CSS, esse modo de inserir JavaScript em uma página, seria o modo incorporado.
Dentro do body ou do head, utilizamos a tag <script>. Note que os comandos podem ser executados sem a necessidade de eventos. Isso não é o mais comum, mas é um recurso que usaremos em nossos estudos.

Exemplo:

<p id="p-texto">Texto Escrito na Tag</p>

<script type="text/javascript">
document.getElementById("p-texto").innerHTML = "Texto Alterado pelo JavaScript";
</script>
----- ----- ----- ----- ----- ----- ----- -----

Texto Alterado pelo JavaScript

----- ----- ----- ----- ----- ----- ----- -----


Arquivo JavaScript
Assim como em CSS, também podemos criar um arquivo separado do html com nossos códigos em JavaScript, esse arquivo deve ser salvo com a extensão .js e é chamado no cabeçalho da página com a tag <script>

Exemplo:

<script type="text/javascript" src="arquivoJavaScript.js"></script>


Obs. Podemos ter as três formas em um mesmo arquivo HTML, depende da necessidade.



Onde se armazenam os dados?


Sempre em um lugar na memória do computador, que pode ser do tipo: Constante ou Variável.

• Constante – seu conteúdo não muda (ou seja, é constante)

• Variável – seu conteúdo pode ser trocado (ou seja, é variável)

Em JavaScript apenas estudaremos VARIÁVEIS, pois nem todos os navegadores reconhecem constantes.



Tipos de variáveis

JavaScript é uma linguagem de tipos de variáveis flexíveis, ao contrário de outras linguagens que exigem a declaração de uma variável com um tipo de dado definido.

Logo, não precisamos definir o tipo de uma variável. Com isso podemos mudar seu valor de texto para número, por exemplo, durante a execução do script (prática que deve ser evitada!).

Exemplo:
	var nome=“Fulano”;
	nome=“Fulano”;
	var nome;



Nomes de variáveis

Variáveis
	Todo nome de variável ou constante deve começar com uma letra ou um underscore (“_”);
	Caracteres subsequentes devem ser letras ou números;
	Não deve conter espaço em branco ou caracteres especiais;
	Não deve ser uma palavra reservada.

JavaScript é Case-Sensitive, logo as variáveis abaixo são todas diferentes:
	quantidade
	QUANTIDADE
	Quantidade
	QUantidade



Como trabalhar com dados
Por exemplo, e se eu quiser transferir um dado de um lugar para outro?

Operação de atribuição (operador =)

x = y;
a = b + c

A variável x recebe o conteúdo da variável y

A variável a recebe o RESULTADO da operação b + c

Operadores Aritméticos para dados do tipo Número
Para você verificar a tabela abaixo, declaramos uma variável x igual a 10

var x=10;

Operadores							EXEMPLO			RESULTADO
+		Adição						z = x + 10		z = 20
-		Subtração					z = x - 10		z = 0
*		Multiplicação				z = x * 10		z = 100
/		Divisão						z = x / 10		z = 1
%		Módulo (Resto da Divisão)	z = x % 3		z = 1
++		Incremento Antes			++z				z = 11
++		Incremento Depois			z++				z = 10
--		Decremento Antes			--z				z = 9
--		Decremento Depois			z--				z = 10




Juntando Textos - Concatenação de Strings

Também usamos o operador “+” para concatenar Strings (textos) em JavaScript

Exemplo:

var x = “Bom ”;
var y = “dia”;
var z = x + y;

// após a execução o resultado será: z = Bom dia

Cuidado, quando usamos o operador “+” com números e textos, o resultado é sempre texto (o número é convertido automaticamente);

var x=4;
var y=“a”;
var z=x+y; // o resultado será z=“4a”

var x=“4”;
var y=“4”;
var z=x+y; //o resultado será z=“44”

Por que saber sobre tipos é importante?
Apesar de você não declarar os tipos das variáveis, o JavaScript sabe sempre o tipo de dado com que está trabalhando. E para ele, tudo que o usuário escreve é TEXTO, mesmo que o usuário escreva algarismos. Como para TEXTO o sinal de + significa uma coisa diferente do que para os NÚMEROS, isso pode ficar complicado.

Por isso, se numa operação existe um NÚMERO e um TEXTO, o NÚMERO é sempre convertido e a operação ocorre como se tudo fosse TEXTO.




Conversão de tipos


Como comentado anteriormente, quando o usuário entra com dados de qualquer forma (veremos uma forma mais a frente), os valores lidos são sempre textos. Caso seja necessário realizar alguma operação matemática com os valores lidos, precisamos inicialmente convertêlos em números. Para isso temos duas funções em JavaScript que convertem para inteiro ou para float (número com casas decimais).

Para converter um texto em número inteiro utilizado a função parseInt.

variável = parseInt (valor [, base]);

Para converter um texto em número real (float), utilizamos a função parseFloat.

variável = parseFloat (valor);


É uma boa prática inserirmos comentários em nossos códigos, em JavaScript podemos fazer isso de duas formas:

Para Comentários de várias linhas:

/* Inserimos aqui
Nossos comentários
Em várias linhas
*/

Para Comentários de uma única linha:

//Aqui inserimos somente uma linha de comentário




Comandos e Funções

Os Comandos sempre chamam Funções (por isso os Comandos também são chamados de ‘Chamadas de Funções’). E essas Funções são criadas assim:

function <nome da função> ([<lista de parâmetros>])

<bloco de instruções>

Instruções Simples X Bloco de Instruções
Para entender a função, primeiro precisamos saber o que significa essa [<lista de parâmetros>]

Uma Instrução Simples sempre termina com “;”

var x = 12;


Um Bloco de Instruções começa com um “{“ e termina com um “}”. E dentro dele vai uma série de instruções:

{
var x = 12;
alert(x);
}

Para que servem os Blocos de Instrução?
Rotina de um comando – Função
Execução condicional
Repetição




Operadores

Operadores de Comparação

OPERADOR			NOME			EXEMPLO			RESULTADO
==					Igual			x == y			Verdadeiro se x for igual a y
!=					Diferente		x != y			Verdadeiro se x for diferente a y
===					Idêntico		x === y			Verdadeiro se x for igual a y e do mesmo tipo
<					Menor			x < y			Verdadeiro se x for menor a y
>					Maior			x > y			Verdadeiro se x for maior a y
<=					Menor ou Igual	x <= y			Verdadeiro se x for menor ou igual a y
>=					Maior ou Igual	x >= y			Verdadeiro se x for maior ou igual a y



Operadores Lógicos

OPERADOR		DESCRIÇÃO									EXEMPLO (a = 3 e b = 5)
&&				E Lógico: Retorna verdadeiro se ambas		a == 3 && b < 10 //retorna verdadeiro
				expressões forem verdadeiras				a != 3 && b == 5 // retorna falso

||				Ou Lógico: Retorna verdadeiro se uma 		a == 3 || b < 10 // retorna verdadeiro
				das expressões forem verdadeiras			a!=3 || b==5 // retorna verdadeiro
															a==1 || b==3 // retorna falso

!				Não Lógico: inverte o resultado 			! (a==3) // retorna falso
				se verdadeiro retorna falso e vice versa 	! (a!=3) // retorna verdadeiro



Tabela de Resultado Operador &&

TESTE 1			TESTE 2			RESULTADO &&
Verdadeiro		Verdadeiro		Verdadeiro
Verdadeiro		Falso			Falso
Falso			verdadeiro		Falso
Falso			Falso			Falso



Tabela de Resultado Operador !!

TESTE 1			TESTE 2			RESULTADO &&
Verdadeiro		Verdadeiro		Verdadeiro
Verdadeiro		Falso 			Verdadeiro
Falso			Verdadeiro		Verdadeiro
Falso			Falso			Falso



Tabela de Resultado Operador !

TESTE			RESULTADO &&
Verdadeiro		Falso
Falso			Verdadeiro





Estruturas de decisão – execução condicional

São blocos de código que serão executados somente se uma dada condição for satisfeita.

Na nossa rotina, estamos sempre tomando decisões, por exemplo:

se estiver chovendo levo o guarda-chuva.
se for final de semana e estiver sol irei para a praia.
Temos disponível em JavaScript as seguintes estruturas de decisões:

if
if ... else
if ... else if ... else...
switch



Estrutura de decisão if

Irá verificar uma condição, se for aceita irá ler o bloco de código, caso não seja aceita não irá ler o bloco de código

<script type="text/javascript">

	console.log("Condicional IF")

	var Num = 5;

	if (Num > 4) {
	console.log("Teste IF aceito, lendo o Bloco IF")
	}

	if (Num == 10) {
	console.log("Teste IF não aceito, Não irá o Bloco IF")
	}

</script>


Estrutura de decisão if ... else

Irá verificar uma condição, se for aceita irá ler o bloco de código if, caso não seja aceita irá ler o bloco de código else

console.log("Condicional IF ... ELSE")

var a = 5;

if (a > 4) 
	{
		console.log("Teste IF aceito, lendo o Bloco IF")
	} 
	else 
	{
		console.log("Teste IF aceito, Não irá ler o bloco Else")	
	}

if (a == 10) 
	{
		console.log("Teste IF não aceito, Não irá o Bloco IF")
	}
	else 
	{
		console.log("Teste IF não aceito, irá ler o bloco Else")	
	}


Estrutura de decisão if ... else if ... else

Irá verificar uma condição, se for aceita irá ler o bloco de código if, caso não seja aceita irá realizar um novo teste, caso aceito irá ler o bloco else if, se não for aceito irá ler o bloco de código else

Podemos encadiar quantos else if forem necessário

[

var data = new Date()
var hora = data.getHours()

if (hora < 12 ) 
	{
		console.log("Bom dia!!!")
	}
	else if (hora < 18)
	{
		console.log("Boa tarde!!!")
	}
	else
	{
		console.log("Boa Noite!!!")
	}

]




Estrutura de decisão switch ... case

Essa condição verifica o valor de um caso, se for aceito irá ler o bloco de código daquele caso

SINTAXE:

switch (valor) {
case valor1:
//instruções 1
break

case valor2:
//instruções 2
break

case valor3:
//instruções 3
break

default:
//instruções padrão
}

Para cada caso devemos colocar o comando break, este comando irá finalizar o caso e evitar que o caso posterior seja executado.

O default é opcional, ele é executado quando nenhum caso anterior é acionado.

Não podemos fazer comparações no case, como x > y, por exemplo.


[

console.log("Condicional SWITCH CASE")

var Data = new Date();
var diaDaSemana = Data.getDay(); //Retorna o dia da semana, sendo 0 Domingo - 1 Segunda - 2 Terça ... 6 Sábado

switch (diaDaSemana)
	{
		case 0:
			console.log("Domingo de descanso merecido :)")
			break

		case 5:
			console.log("Opa... Sextou U.u")
			break

		case 6:
			console.log("Que maravilha... Sabadão chegou :p")
			break

		default:
			console.log("Semana Longaaaaaaaa....")
	}

]



Estruturas de repetição

Utilizadas quando necessitamos repetir um bloco de instruções. Podemos executar um laço de repetição com um número específico de vezes, ou enquanto uma condição for verdadeira. Essas estruturas também são conhecidas como laço de repetição ou loop. Em JavaScript veremos for e while.



Estrutura de repetição FOR
Utilizada quando sabemos o número de repetições que serão feitas.

Sintaxe:

for (valor inicial; condição; incremento/decremento)
{
//instruções que serão repetidas
}


[

	console.log("Estrutura de Repetição FOR")

	var cont;

	for (cont = 1; cont <= 10 ; cont++)
		{
			console.log("Repetição Número: " + cont + "/10");
		}

]



